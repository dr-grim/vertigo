		TTL	mc004a		; Various subroutines & miscallaneous					; routines********************************************************************************convert_coords	JSR	calculate_X		LSR	workspace+&5		; divide X co-ord by 16		ROR	workspace+&4		LSR	workspace+&5		ROR	workspace+&4		LSR	workspace+&5		ROR	workspace+&4*		CLC*		ROR	workspace+&4		LSR	workspace+&4		LDA	workspace+&4				DEA		STA	old_X		JSR	calculate_Y		LSR	workspace+&5		ROR	workspace+&4		LSR	workspace+&5		ROR	workspace+&4		LDA	workspace+&4		EOR	#255		SEC		SBC	#8		STA	old_Y		RTS********************************************************************************music_onoff	LDA	music_volume		BNE	not_m0	LDA	menu_st	AND	#%01111111	STA	menu_st		LDA	#6		LDX	#10		JSR	envelopes_to_0		BRA	sound_onoffnot_m0	LDA	menu_st	ORA	#%10000000	STA	menu_st		LDA	music_volume		CMP	#1		BNE	not_m1		LDA	#5		LDX	#>envelope61		LDY	#<envelope61		JSR	do_envelopes		BRA	sound_onoffnot_m1		CMP	#2		BNE	not_m2		LDA	#5		LDX	#>envelope62		LDY	#<envelope62		JSR	do_envelopes		BRA	sound_onoffnot_m2		CMP	#3		BNE	not_m3		LDA	#5		LDX	#>envelope63		LDY	#<envelope63		JSR	do_envelopes		BRA	sound_onoffnot_m3		LDA	#5		LDX	#>envelope64		LDY	#<envelope64		JSR	do_envelopessound_onoff	LDA	sound_volume		BNE	not_s0	LDA	menu_st	AND	#%10111111	STA	menu_st		LDA	#3		LDX	#5		JMP	envelopes_to_0not_s0	LDA	menu_st	ORA	#%01000000	STA	menu_st		LDA	sound_volume		CMP	#1		BNE	not_s1		LDA	#3		LDX	#>envelope31		LDY	#<envelope31		JMP	do_envelopesnot_s1		CMP	#2		BNE	not_s2		LDA	#3		LDX	#>envelope32		LDY	#<envelope32		JMP	do_envelopesnot_s2		CMP	#3		BNE	not_s3		LDA	#3		LDX	#>envelope33		LDY	#<envelope33		JMP	do_envelopesnot_s3		LDA	#3		LDX	#>envelope34		LDY	#<envelope34		JMP	do_envelopes********************************************************************************envs_to_do	DS	1env_pointer	=	workspacedo_envelopes	STA	envs_to_do		STX	env_pointer		STY	env_pointer+1de_loop	LDA	#8		LDX	env_pointer		LDY	env_pointer+1		JSR	osword		LDA	env_pointer		CLC		ADC	#14		STA	env_pointer		LDA	env_pointer+1		ADC	#0		STA	env_pointer+1		DEC	envs_to_do		BNE	de_loop		RTS********************************************************************************envelopes_to_0	STA	off_envelope		INX		STX	last_enveo_loop	DEFINE	off_envelope		INC	off_envelope		LDA	off_envelope		CMP	last_env		BNE	eo_loop		RTSlast_env	DS	1*********************************************************************************	LDA	menu_st		; Q key being pressed ??? ( No sound )*		BIT	#64*		BEQ	musicoff**		LDA	#210*		LDX	#0*		LDY	#0*		JSR	osbyte*		BRA	sound**musicoff	LDA	#210*		LDX	#1*		LDY	#0*		JSR	osbyte**sound		LDA	menu_st		; M key being pressed ??? ( Music )*		BIT	#128*		BEQ	soundoff**		JMP	envelope_on**soundoff	JMP	envelope_off**********************************************************************************envelope_on	DEFINE	envelope6*		DEFINE	envelope7*		DEFINE	envelope8*		DEFINE	envelope9*		DEFINE	envelope10**		RTS*******************************************envelope_off	LDA	#6*		STA	off_envelope**eo_loop	DEFINE	off_envelope**		INC	off_envelope*		LDA	off_envelope*		CMP	#11*		BLT	eo_loop**		RTS*********************************************************************************conv_sprite	LDA	xy		; calculates pixel offset within		CLC			; bytes of ball ( 0,1,2 or 3 )		ADC	xy+2			LSR	A		LSR	A		AND	#3		STA	workspace+7		STA	pixel_offset		LDY	#7cs_loop1	LDA	c+1,Y		; Converts <mask> from b/w style		AND	#%11110000	; data to colour style data,		STA	c_mask,Y	; with an EOR #255 as well.		LSR	A		LSR	A		; 1st half of byte ( %11110000 )		LSR	A		LSR	A		ORA	c_mask,Y		STA	c_mask,Y		LDA	c+1,Y		; 2nd half of byte ( %00001111 )		AND	#%00001111		STA	c_mask+8,Y		ASL	A		ASL	A		ASL	A		ASL	A		ORA	c_mask+8,Y		STA	c_mask+8,Y		DEY		BPL	cs_loop1		LDA	frame		; pointer to present ball frame		ASL	A		ASL	A		ASL	A		ASL	A		ADC	#>ball_data		STA	workspace+1				LDA	#<ball_data		ADC	#0		STA	workspace+2		LDA	#>actual_ball	; pointer to where new ball should		STA	workspace+3	; be stored		LDA	#<actual_ball		STA	workspace+4		LDX	#0		; poke extra row to 0		JSR	slide_frame	; slide it ?workspace times to the right		LDA	#>c_mask	; pointer to present mask		STA	workspace+1		LDA	#<c_mask		STA	workspace+2		LDA	#>actual_mask	; pointer to where new mask should		STA	workspace+3	; be stored		LDA	#<actual_mask		STA	workspace+4		LDX	#0		; poke extra row to 255		JSR	slide_frame	; slide it ?workspace times to the right		LDY	#23cs_loop2	LDA	actual_ball,Y		AND	actual_mask,Y		STA	actual_ball,Y		DEY		BPL	cs_loop2		LDY	#23cs_loop3	LDA	actual_mask,Y		EOR	#255		STA	actual_mask,Y		DEY		BPL	cs_loop3		RTS****************************************slide_frame	BANK	4		LDY	#0		; copies normal sprite to workspacesf_loop1	LDA	(workspace+1),Y	; ( is designed for 2*8 sprites )		STA	(workspace+3),Y		INY		CPY	#16		BNE	sf_loop1		TXA			; blank out last row of bytessf_loop2	STA	(workspace+3),Y	; ( to contents of X on entry )		INY		CPY	#24		BNE	sf_loop2		TXA		AND	#%10001000		STA	workspace		LDX	workspace+7sf_loop3	TXA		BEQ	exit_sf		DEX		LDY	#0sf_loop4*		CLC		LDA	(workspace+3),Y		AND	#%00010001		ASL	A		ASL	A		ASL	A		STA	workspace+5		LDA	(workspace+3),Y		AND	#%11101110		LSR	A		ORA	workspace		STA	(workspace+3),Y		TYA		ADC	#8		TAY		LDA	(workspace+3),Y		AND	#%00010001		ASL	A		ASL	A		ASL	A		STA	workspace+6		LDA	(workspace+3),Y		AND	#%11101110		LSR	A		ORA	workspace+5		STA	(workspace+3),Y		TYA		ADC	#8		TAY		LDA	(workspace+3),Y		AND	#%11101110		LSR	A		ORA	workspace+6		STA	(workspace+3),Y		TYA		SEC		SBC	#15		TAY		CPY	#8		BNE	sf_loop4		BRA	sf_loop3exit_sf	BANK	5		RTS****************************************print_jewel	LDY	#4pj_loop1	LDA	j,Y		STA	workspace+&B,Y		DEY		BPL	pj_loop1		JSR	convert_coords		LDA	j		CLC				ADC	j+2		LSR	A		LSR	A		AND	#3		STA	workspace+7		LDA	screen_number		DEA		ASL	A		ASL	A		ASL	A		ASL	A		PHA		ADC	#>jewel_data		STA	workspace+1		LDA	#<jewel_data		ADC	#0		STA	workspace+2		LDA	#>actual_ball		STA	workspace+3		LDA	#<actual_ball		STA	workspace+4		LDX	#0		JSR	slide_frame		PLA		CLC		ADC	#>jewel_masks		STA	workspace+1		LDA	#<jewel_masks		ADC	#0		STA	workspace+2		LDA	#>actual_mask		STA	workspace+3		LDA	#<actual_mask		STA	workspace+4		LDX	#255		JSR	slide_frame		LDX	old_X		LDY	old_Y		JMP	mask_sprite********************************************************************************A_pressed	LDA	menu_st		AND	#3		BNE	A_not_keys		INKEY	-66		RTSA_not_keys	LDA	js		AND	#1		RTS****************************************Z_pressed	LDA	menu_st		AND	#3		BNE	Z_not_keys		INKEY	-98		RTSZ_not_keys	LDA	js		AND	#2		RTS****************************************sl_pressed	LDA	menu_st		AND	#3		BNE	sl_not_keys		INKEY	-105		RTSsl_not_keys	LDA	js		AND	#8		RTS****************************************cl_pressed	LDA	menu_st		AND	#3		BNE	cl_not_keys		INKEY	-73		RTScl_not_keys	LDA	js		AND	#4		RTS****************************************calc_height	LDA	pixel_X		STA	workspace+4		LDA	workspace+6		SEC		SBC	workspace+5		STA	workspace		LDA	#0		SBC	#0		STA	workspace+1		STZ	workspace+2		STZ	workspace+3ch_loop1	LSR	workspace+4		BCC	C_is_clear		LDA	workspace+2		CLC		ADC	workspace		STA	workspace+2		LDA	workspace+3		ADC	workspace+1		STA	workspace+3C_is_clear	ASL	workspace		ROL	workspace+1		LDA	workspace+4		BNE	ch_loop1		LDA	workspace+3		LSR	A		ROR	workspace+2		LSR	A		ROR	workspace+2		LSR	A		ROR	workspace+2		STA	workspace+3		LDA	workspace+2		LSR	workspace+3		ROR	A		CLC		ADC	workspace+5		BCC	ch_skip		INC	workspace+3*		PHA*		LDA	workspace+3*		ADC	#0*		STA	workspace+3*		PLAch_skip	RTS********************************************************************************mult		STX	workspace+&6		STY	workspace+&7		LDA	#0		LDX	#8next		LSR	workspace+&7		BCC	rot		CLC		ADC	workspace+&6rot		ROR	A		ROR	workspace+&8		DEX		BNE	next		STA	workspace+&9		LDA	workspace+&8		RTS********************************************************************************		CHN	mc004b