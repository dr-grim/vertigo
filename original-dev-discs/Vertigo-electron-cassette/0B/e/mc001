		TTL	mc001		; Initialises game,loads in data,etc********************************************************************************		EXEC	execute********************************************************************************exec2iBM		LDX	#1		; screen		DEX		STX	screen_number		STX	level_number	; level		STX	score		; score		STX	score+1		STX	score+2		STX	score+3		STX	score+4		STX	controller	; not demostart		JSR	demost2		LDA	start_type		BNE	not_1stlev		LDX	#1		; screen		STX	screen_number		STX	level_number	; level		JMP	skip_n1lnot_1stlev	LDA	old_screen		STA	screen_number		LDX	old_level		STX	level_number		LDA	screen_number		CMP	#1		BNE	cheaton		LDA	level_number		CMP	#1		BNE	cheaton		BEQ	skip_n1lcheaton	LDA	controller		ORA	#2		STA	controllerskip_n1l	LDA	controller		AND	#127		STA	controller		JSR	reset_statusds		LDA	#0		STA	timer_frames		STA	timer_frames+1		STA	timer_frames+2		STA	timer_status		JSR	venetian		JSR	screen		; Draw screenn		LDA	lives		STA	old_lives		JSR	go		DEC	lives		LDA	lives		CMP	#255		BEQ	deceased		LDA	lives		CMP	old_lives		BLT	not_ds		LDY	level_number		DEY		TYA		ASL	A		TAY		LDA	timer_speeds,Y		ADC	timer_digits		STA	timer_digits		LDA	timer_speeds+1,Y		ADC	timer_digits+1		STA	timer_digits+1test_dig0	LDA	timer_digits		CMP	#4		BLT	not_0ov		LDA	#4		STA	timer_digits		LDA	#0		STA	timer_digits+1		STA	timer_digits+2		BEQ	dsnot_0ov	LDA	timer_digits+1		CMP	#10		BLT	ds		INC	timer_digits		LDA	#0		STA	timer_digits+1		BEQ	test_dig0not_ds		LDA	#0		STA	timer_digits+2		LDX	level_number		DEX				TXA		ASL	A		TAY		LDA	timer_speeds,Y		STA	timer_digits		LDA	timer_speeds+1,Y		STA	timer_digits+1*		LDA	#0*		STA	timer_frames*		STA	timer_frames+1*		STA	timer_frames+2*		STA	timer_status		JMP	ndeceased	LDA	level_number		STA	old_level		LDA	screen_number		STA	old_screen		LDA	#14		STA	workspace		LDA	#4		LDX	#9		LDY	#1		JSR	box		LDX	#>XXX2		LDY	#<XXX2		JSR	print_text		LDA	#6		JSR	large_delay		LDY	#0		JSR	compare_score		BEQ	not_new_hs		JMP	new_high_scorenot_new_hs	JSR	do_hs		LDA	#20		STA	workspacennh_loop	LDA	#200		JSR	key_delay		JSR	test_start		BCC	not_demo2		JMP	st2not_demo2	DEC	workspace		BNE	nnh_loop		JMP	iBM****************************************new_high_score	LDA	#8		STA	workspace		LDX	#22		LDY	#14		JSR	box		JSR	pthst		LDX	#>XX3		LDY	#<XX3		JSR	print_text		LDA	#6		JSR	large_delay		LDX	#0which_hs	TXA			; Calculate HS(X) address		STA	drmem		ASL	A		ASL	A		ASL	A		ASL	A		ADC	drmem		INX			; Waits until it finds a high score		TAY			; bigger than your score, and puts		JSR	compare_score	; it's number in X		BNE	which_hs		DEX		DEX		TXA		STA	drmem+4		STA	drmem		ASL	A		ASL	A		ASL	A		ASL	A		ADC	drmem		; Find address of it		ADC	#16		; A=Address of end of name		STA	drmem		; (max. add to be moved)		LDY	#17		; Y=Address to move		TAXmveloOp	LDA	XXXX,Y		STA	XXXX-17,Y	; Move HS's below yours down		INY		CPY	drmem		; Until Y passes top		BCC	mveloOp		BEQ	mveloOp	 	LDY	#12  		LDA	#32blanklp	STA	XXXX,X		; Fill your HS place with spaces		DEX		DEY		BNE	blanklp		LDA	score+4		STA	XXXX,X		; Poke new Score		LDA	score+3		STA	XXXX-1,X		LDA	score+2		STA	XXXX-2,X		LDA	score+1		STA	XXXX-3,X		LDA	score		STA	XXXX-4,X		INX		STX	drmem+3		; Store name add for input routine		JSR	pthst		LDA	#11		LDX	#0		JSR	osbyte		LDA	#21		LDX	#0		STX	workspace		LDY	#0		JSR	osbyte		LDX	#17		LDA	#13		CLC		ADC	drmem+4		TAY		JSR	move_cursorall_ere	LDX	#1		LDY	#0		LDA	#&81		JSR	osbyte		; Read key(in X centiseconds)		CPY	#&1B		BNE	nscape		; Escape hit?(if not skip next lines)		LDA	#&7E		JSR	osbyte		; Acknowledge Escape		JMP	all_ere		; Try 'gainnscape		CPY	#255		BEQ	all_ere		; Time-Out...Try 'gain		LDA	workspace		CPX	#13		; RETURN?		BEQ	name_fin		CMP	#12		BNE	skipabit	; End of name?		CPX	#127		; DELETE?		BEQ	skipabitnotRET		JMP	all_ereskipabit	CPX	#32		BCC	all_ere		; Is char<32		CPX	#128		BCS	all_ere		; or >127		CPX	#127		; DELETE?		BEQ	del_hit		LDA	workspace		CMP	#12		BEQ	all_ere		ADC	drmem+3		TAY		TXA		STA	XXXX,Y		JSR	oswrch		INC	workspace		JMP	all_eredel_hit	LDA	workspace		BEQ	all_ere		ADC	drmem+3		TAY		LDA	#32		STA	XXXX-1,Y		DEC	workspace		LDA	#127		JSR	oswrch		JMP	all_erename_fin	JSR	venetian		JMP	iBM********************************************************************************pthst		LDA	#13		; Y co-ord		STA	workspace+5		LDA	#>hi_scores	; address of high score table		STA	workspace+2		LDA	#<hi_scores		STA	workspace+3		LDA	#10		; number of entries in table		STA	workspace+4ph_loop1	LDX	#10		LDY	workspace+5		JSR	move_cursor		LDX	workspace+2		LDY	workspace+3		JSR	print_number		LDX	#17		LDY	workspace+5		JSR	move_cursor		LDY	#5		ph_loop2	LDA	(workspace+2),Y		JSR	oswrch		INY		CPY	#17		BCC	ph_loop2		LDA	workspace+2		ADC	#16		STA	workspace+2		BCC	ph_skip1		INC	workspace+3ph_skip1	INC	workspace+5		DEC	workspace+4		BNE	ph_loop1		RTS********************************************************************************hi_scoresXXXX		DFB	0,0,0,0,0		ASC	"  Stopped   "		DFB	0,0,1,0,0		ASC	"Snail's Pace"		DFB	0,0,2,0,0		ASC	"  Shameful  "		DFB	0,0,5,0,0		ASC	"    Slow    "		DFB	0,1,0,0,0		ASC	"  Subsonic  "		DFB	0,2,5,0,0		ASC	"   Speedy   "		DFB	0,5,0,0,0		ASC	" Supersonic "		DFB	1,0,0,0,0		ASC	"  Stylish   "		DFB	2,5,0,0,0		ASC	"   Superb   "		DFB	5,4,3,2,1		ASC	"  Superior  "XXX2		DFB	31,15,5		ASC	"Game Over"		DFB	0XX3		DFB	31,11,9		ASC	"Congratulations !"		DFB	31,14,10		ASC	"Hi-score!!!"		DFB	31,11,11		ASC	"Type In Your Name:"		DFB	0********************************************************************************brk		LDX	#>b_lets		LDY	#<b_lets		JSR	print_text*		LDY	#0*b_lp2		INY*		LDA	(&FD),Y*		JSR	oswrch*		BNE	b_lp2*		LDA	#21*		LDX	#0*		LDY	#0*		JSR	osbyte*		LDA	#129*		LDX	#0*		LDY	#3*		JSR	osbyte		JMP	executeb_lets		ASC	"Err"		DFB	0****************************************demo		LDA	controller		AND	#254		STA	controller		LDX	#0		STX	screen_number		INX		STX	level_numbers_lp1		INC	screen_number		LDA	screen_number		CMP	#11		BEQ	end_of_demo		JSR	venetian		LDA	controller		AND	#252		ORA	#128		STA	controller		JSR	screen		LDA	controller		AND	#128		BEQ	ext_d12		JSR	do_demots		BCS	ext_d12		JMP	s_lp1*ext_d1		RTSend_of_demo	JSR	venetian		JSR	do_hs		JSR	do_demots		BCS	ext_d12		JMP	demo****************************************do_hs		LDA	#8		STA	workspace		LDA	#10		LDX	#21		LDY	#12		JSR	box		LDX	#>hstable		LDY	#<hstable		JSR	print_text		JMP	pthst****************************************do_demots	LDX	#255d_loop1	STX	xy		JSR	fx19		JSR	test_start		BCS	ext_d12		LDX	xy		DEX		BNE	d_loop1ext_d12	RTS********************************************************************************reset_status	LDA	#0		STA	score		STA	score+1		STA	score+2		STA	score+3		STA	score+4		STA	timer_digits+2*		STA	timer_frames*		STA	timer_frames+1*		STA	timer_frames+2**		STA	timer_status		LDX	level_number		DEX				TXA		ASL	A		TAY		LDA	timer_speeds,Y		STA	timer_digits		LDA	timer_speeds+1,Y		STA	timer_digits+1		LDA	#3		; lives		STA	lives		JSR	animate_lives		JSR	display_timer		JMP	print_score********************************************************************************compare_score	LDA	score		CMP	hi_scores,Y		BMI	not_newh		BNE	is_newh		LDA	score+1		CMP	hi_scores+1,Y		BMI	not_newh		BNE	is_newh		LDA	score+2		CMP	hi_scores+2,Y		BMI	not_newh		BNE	is_newh		LDA	score+3		CMP	hi_scores+3,Y		BMI	not_newh		BNE	is_newh		LDA	score+4		CMP	hi_scores+4,Y		BMI	not_newh		BNE	is_newhnot_newh	LDA	#0		RTSis_newh	LDA	#255		RTS********************************************************************************hstable	DFB	31,14,11		ASC	"Hi-scores :"		DFB	0********************************************************************************test_start	JSR	check_optkeys		LDA	controller		AND	#128		BEQ	ts4		INKEY	-99		; = <SPACE>		BEQ	ts1		LDA	menu_st		AND	#%11111100		STA	menu_st		LDA	#1		BNE	ts5ts1		INKEY	-49		; = "1"		BEQ	ts2		LDA	#0		BEQ	ts5ts2		LDA	#128		; = <FIRE>		LDX	#0		JSR	osbyte		TXA		BEQ	ts4		LDA	menu_st		AND	#%11111100		ORA	#%00000001		STA	menu_st		LDA	#1		BNE	ts5ts4		JSR	testP		BEQ	ts6		JSR	ts7		BEQ	ts6		LDA	screen_number		STA	old_screen		LDA	level_number		STA	old_level		LDA	#1		BNE	ts5ts6		CLC		RTSts5		STA	start_type		SEC		RTS********************************************************************************ts7		INKEY	-129		BEQ	ts7		JSR	password		CMP	#0		RTS********************************************************************************testP		INKEY	-56		; = "P"		RTS********************************************************************************		CHN	mc002a