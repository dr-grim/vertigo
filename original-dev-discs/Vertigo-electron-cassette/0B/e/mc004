		TTL	mc004a		; Various subroutines & miscallaneous					; routines********************************************************************************convert_coords	JSR	calculate_X		LDA	workspace+4		LSR	workspace+5		; divide X co-ord by 32		ROR	A		LSR	workspace+5		ROR	A		LSR	workspace+5		ROR	A		SEC		SBC	#2		LSR	A		LSR	A		STA	old_X		JSR	calculate_Y		LDA	workspace+4		LSR	workspace+&5		ROR	A		LSR	workspace+&5		ROR	A		EOR	#255		SEC		SBC	#8		STA	old_Y		RTS********************************************************************************music_onoff*	LDA	menu_st		; Q key being pressed ??? ( No sound )*		AND	#64*		BEQ	musicoff**		LDX	#0*		BEQ	skipmo**musicoff	LDX	#1**skipmo		LDA	#210*		LDY	#0*		JSR	osbyte*		LDX	#36		LDY	#2		JSR	move_cursor		LDA	menu_st		AND	#3		BNE	moo_joy		LDA	#"K"		BNE	skip_moojmoo_joy	LDA	#"J"skip_mooj	JMP	oswrch********************************************************************************conv_sprite	LDA	xy		; calculates pixel offset within		CLC			; bytes of ball ( 0 to 7 )		ADC	xy+2			CLC		ADC	#16		LSR	A		LSR	A		AND	#7		STA	workspace+7		STA	pixel_offset		LDA	frame		; pointer to present ball frame		ASL	A		ASL	A		ASL	A		ADC	#>ball_data		STA	workspace+1				LDA	#<ball_data		ADC	#0		LDX	#>actual_ball	; pointer to where new ball should		LDY	#<actual_ball	; be stored		JSR	slide_frame	; slide it ?workspace times to the right		LDA	#>c+1		; pointer to present mask		STA	workspace+1		LDA	#<c+1		LDX	#>actual_mask	; pointer to where new mask should		LDY	#<actual_mask	; be stored		JSR	slide_frame	; slide it ?workspace times to the right		LDY	#15cs_loop2	LDA	actual_ball,Y		AND	actual_mask,Y		STA	actual_ball,Y		DEY		BPL	cs_loop2		JSR	invert_amask		RTS****************************************slide_frame	STA	workspace+2		STX	workspace+3		STY	workspace+4		LDY	#7		; copies normal sprite to workspacesf_loop1	LDA	(workspace+1),Y	; ( is designed for 1*8 sprites )		STA	(workspace+3),Y		DEY		BPL	sf_loop1		LDY	#8		LDA	#0		; blank out last row of bytessf_loop2	STA	(workspace+3),Y	; ( to contents of X on entry )		INY		CPY	#16		BNE	sf_loop2		LDX	workspace+7sf_loop3	TXA		BEQ	exit_sf		DEX		LDY	#0sf_loop4	LDA	(workspace+3),Y		AND	#%00000001		LSR	A		ROR	A		STA	workspace+5		LDA	(workspace+3),Y		LSR	A		STA	(workspace+3),Y		TYA		CLC		ADC	#8		TAY		LDA	(workspace+3),Y		LSR	A		ORA	workspace+5		STA	(workspace+3),Y		TYA		SEC		SBC	#7		TAY		CPY	#8		BNE	sf_loop4		BEQ	sf_loop3exit_sf	RTS****************************************print_jewel	LDY	#4pj_loop1	LDA	j,Y		STA	workspace+&B,Y		DEY		BPL	pj_loop1		JSR	convert_coords		LDA	j		CLC				ADC	j+2		LSR	A		LSR	A		AND	#7		STA	workspace+7		LDX	screen_number		DEX		TXA		ASL	A		ASL	A		ASL	A		PHA		ADC	#>jewel_data		STA	workspace+1		LDA	#<jewel_data		ADC	#0		LDX	#>actual_ball		LDY	#<actual_ball		JSR	slide_frame		PLA		CLC		ADC	#>jewel_masks		STA	workspace+1		LDA	#<jewel_masks		ADC	#0		LDX	#>actual_mask		LDY	#<actual_mask		JSR	slide_frame		JSR	invert_amask********************************************************************************do_ms		LDA	#2		LDX	old_X		LDY	old_Y		JMP	mask_sprite********************************************************************************A_pressed	LDA	menu_st		AND	#3		BNE	A_not_keys		INKEY	-66		RTSA_not_keys	LDA	js		AND	#1		RTS****************************************Z_pressed	LDA	menu_st		AND	#3		BNE	Z_not_keys		INKEY	-98		RTSZ_not_keys	LDA	js		AND	#2		RTS****************************************sl_pressed	LDA	menu_st		AND	#3		BNE	sl_not_keys		INKEY	-105		RTSsl_not_keys	LDA	js		AND	#8		RTS****************************************cl_pressed	LDA	menu_st		AND	#3		BNE	cl_not_keys		INKEY	-73		RTScl_not_keys	LDA	js		AND	#4		RTS****************************************calc_height	STX	workspace+5		STY	workspace+6		LDA	pixel_X		STA	workspace+4		LDA	workspace+6		SEC		SBC	workspace+5		STA	workspace		LDA	#0		STA	workspace+2		STA	workspace+3		SBC	#0		STA	workspace+1ch_loop1	LSR	workspace+4		BCC	C_is_clear		LDA	workspace+2		CLC		ADC	workspace		STA	workspace+2		LDA	workspace+3		ADC	workspace+1		STA	workspace+3C_is_clear	ASL	workspace		ROL	workspace+1		LDA	workspace+4		BNE	ch_loop1		LDA	workspace+3		LSR	A		ROR	workspace+2		LSR	A		ROR	workspace+2		LSR	A		ROR	workspace+2		STA	workspace+3		LDA	workspace+2		LSR	workspace+3		ROR	A		CLC		ADC	workspace+5		BCC	ch_skip		INC	workspace+3ch_skip	STA	workspace		LDA	#72		SEC		SBC	workspace		RTS********************************************************************************mult		STX	workspace+&6		STY	workspace+&7		LDA	#0		LDX	#8next		LSR	workspace+&7		BCC	rot		CLC		ADC	workspace+&6rot		ROR	A		ROR	workspace+&8		DEX		BNE	next		STA	workspace+&9		LDA	workspace+&8		RTS********************************************************************************calculate_X	LDA	workspace+&B		CLC		ADC	workspace+&D		STA	workspace+&4		LDA	workspace+&C		ADC	workspace+&E		STA	workspace+&5		RTS****************************************calculate_Y	LDA	#-128		CLC		ADC	workspace+&D		STA	workspace+&4		LDA	#2		ADC	workspace+&E		STA	workspace+&5		LDA	workspace+&4		SEC		SBC	workspace+&B		STA	workspace+&4		LDA	workspace+&5		SBC	workspace+&C		LSR	A		ROR	workspace+&4		LSR	A		ROR	workspace+&4		LSR	A		ROR	workspace+&4		LDY	workspace+&4		STY	workspace+&8		TAY		STY	workspace+&9		LDX	#4loop		LDA	workspace+&8		CLC		ADC	workspace+&4		STA	workspace+&8		TYA		ADC	workspace+&9		STA	workspace+&9		DEX		BNE	loop		LDA	workspace+&8		STA	workspace+&4		LDA	workspace+&9		STA	workspace+&5		LDA	workspace+&4		CLC		ADC	workspace+&F		STA	workspace+&4		BCC	exit_cY		INC	workspace+&5exit_cY	RTS**********************************************************************************check_optkeys	JSR	music_onoff		INKEY	-21		BEQ	not_keys		LDA	menu_st		AND	#%11111100		STA	menu_stnot_keys	INKEY	-117		BEQ	not_stick		LDA	menu_st		AND	#%11111100		ORA	#%00000001		STA	menu_stnot_stick	LDA	sound_count	BNE	not_sounddown		INKEY	-114		BEQ	not_soundup	LDA	&8E7	CMP	#120	BEQ	not_soundup	CLC	ADC	#20*	TAX*	STA	&8E7*	STA	&8EB*	STA	&8F7*	STA	&8FB*	LDA	&8EC*	ADC	#20*	STA	&8EC*	STA	&8FC	JMP	sd_cont*		LDA	menu_st*		ORA	#%01000000*		STA	menu_stnot_soundup	INKEY	-33		BEQ	not_sounddown2	LDA	&8E7	BEQ	not_sounddown	SEC	SBC	#20*	TAX*	LDA	&8EC*	SBC	#20sd_cont	STA	&8E7	STA	&8EB	STA	&8F7	STA	&8FB	STA	&8EC	STA	&8FC*sd_cont	LDA	#10	STA	sound_count	RTS*		LDA	menu_st*		AND	#%10111111*		STA	menu_stnot_sounddown	DEC	sound_countnot_sounddown2		RTS**********************************************************************************setup_ball	LDA	#8		STA	ra_height+1		STA	ms_height+1setupb3	LDA	#>actual_mask		STA	ms_mask+1		LDA	#<actual_mask		STA	ms_mask+2		LDA	#>actual_ball		STA	ms_sprite+1		LDA	#<actual_ball		STA	ms_sprite+2setupb2	LDA	#>screen_store		STA	restore+1		STA	save+1		LDA	#<screen_store		STA	restore+2		STA	save+2		RTS**********************************************************************************		CHN	mc005