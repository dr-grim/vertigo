;		TTL	mc000		; All sprite/screen routines that poke
					; directly to the shadow screen memory
;****************************************
;****************************************

		; ORG	&1100
		ORG codestart

;****************************************
;****************************************

;.codestart	;	EMBED	codedest

; * * * * * * * * * * * * * * * * * * * *

.blck_spr	TYA
		CLC
		ADC	block_sh
		TAY
		JSR	calculate_byte

		LDA	#4		; width of sprite in bytes
		STA	workspace+4

.bml		LDX	block_sh

		LDA	workspace
		PHA
		AND	#&F8
		STA	workspace+5	; copy of screen address MOD,
		LDA	workspace+1
		STA	workspace+6	; and DIV.
		PLA
		AND	#7
		TAY

.bdc		LDA	(workspace+5),Y	; LDA screen

.b_mask		AND	&FFFF,X		; AND mask

.b_sprite	ORA	&FFFF,X		; OR sprite

		STA	(workspace+5),Y	; STA screen

		INX			; X will never clock as data = 24 bytes

.bch		INY
		CPX	#72
		BEQ	beoc

		CPY	#8
		BNE	bdc

		LDA	workspace+5
		ADC	#&3F
		STA	workspace+5
		LDA	workspace+6
		ADC	#1
		STA	workspace+6

		LDY	#0
		BEQ	bdc

.beoc		LDA	workspace
;*		CLC
		ADC	#7		; WAS 8
		STA	workspace
		BCC	bcc

		CLC
		INC	workspace+1

.bcc		LDA	b_mask+1
		ADC	#72
		STA	b_mask+1
		BCC	bm_cc

		INC	b_mask+2
		CLC

.bm_cc		LDA	b_sprite+1
		ADC	#72
		STA	b_sprite+1
		BCC	bs_cc

		INC	b_sprite+2

.bs_cc		DEC	workspace+4
		BNE	bml

		RTS

;****************************************
;****************************************

.mask_sprite	STA	workspace+4

		JSR	calculate_byte

.ms_height	LDA	#&FF		; height of sprite in bytes
		STA	workspace+2
		STA	workspace+3

;*ms_width	LDA	#&FF		; width of sprite in bytes
;*		STA	workspace+4

		LDX	#0
.ml1		LDA	workspace
		PHA
		AND	#&F8
		STA	workspace+5	; copy of screen address MOD,
		LDA	workspace+1
		STA	workspace+6	; and DIV.
		PLA
		AND	#7
		TAY

.dc1		LDA	(workspace+5),Y	; LDA screen

.save		STA	screen_store,X	; STA area

.ms_mask	AND	&FFFF,X		; AND mask

.ms_sprite	ORA	&FFFF,X		; OR sprite

		STA	(workspace+5),Y	; STA screen

		INX			; X will never clock as data = 24 bytes
		BEQ	dh1

.ck1		INY
		CPX	workspace+3
		BEQ	eoc1

		CPY	#8
		BNE	dc1

		LDA	workspace+5
		ADC	#&3F
		STA	workspace+5
		LDA	workspace+6
		ADC	#1
		STA	workspace+6

		LDY	#0
		BEQ	dc1

.dh1		INC	ms_mask+2
		INC	ms_sprite+2
		BNE	ck1

.eoc1		LDA	workspace
;*		CLC
		ADC	#7		; WAS 8
		STA	workspace
		BCC	cc1

		CLC
		INC	workspace+1

.cc1		LDA	workspace+3
		ADC	workspace+2
		STA	workspace+3

		DEC	workspace+4
		BNE	ml1

		RTS

;****************************************
;****************************************

.restore_area	STA	workspace+4

		JSR	calculate_byte

.ra_height	LDA	#&FF		; height of sprite in bytes
		STA	ra_adc+1
		STA	workspace+3

;*ra_width	LDA	#&FF		; width of sprite in bytes
;*		STA	workspace+4

		LDX	#0

.ml3		LDA	workspace
		AND	#&F8
		STA	workspace+5	; copy of screen address MOD,
		LDA	workspace+1
		STA	workspace+6	; and DIV.
		LDA	workspace
		AND	#7
		TAY

.restore	LDA	&FFFF,X		; restore area

		STA	(workspace+5),Y	; to screen

		INX			; X will never clock as data = 24 bytes
		BEQ	dh3

.chk3		INY
		CPX	workspace+3
		BEQ	eoc3

		CPY	#8
		BNE	restore

		LDA	workspace+5
		ADC	#&3F
		STA	workspace+5
		LDA	workspace+6
		ADC	#1
		STA	workspace+6

		LDY	#0
		BEQ	restore

.dh3		INC	restore+2
		BNE	chk3

.eoc3		LDA	workspace
;*		CLC
		ADC	#7		; WAS 8
		STA	workspace
		BCC	cc3

		CLC
		INC	workspace+1

.cc3		LDA	workspace+3
.ra_adc		ADC	#8
		STA	workspace+3

		DEC	workspace+4
		BNE	ml3

		RTS

;****************************************
;****************************************

.calculate_byte	LDA	#0
		STA	workspace+1
		TYA
		AND	#7
		STA	workspace
 		TYA
		LSR	A
		LSR	A
		AND	#%11111110
		TAY
		TXA
		ASL	A
		ROL	workspace+1
		ASL	A
		ROL	workspace+1
		ASL	A
		ROL	workspace+1
		ADC	workspace
		ADC	calc_table,Y
		STA	workspace
		LDA	calc_table+1,Y
		ADC	workspace+1
		STA	workspace+1

		RTS

;****************************************
;*	Table for sprite routine	*
;*					*
.calc_table	LOOKUP	&5800,&140,32	; Forms a table of &280 multiplication
					; starting at <screen>, with 18 entries.
;*					*
;****************************************
;****************************************

.d_shadow	LDX	old_X2
		LDY	old_Y2
		JSR	calculate_byte

		LDY	#0
		LDA	shadow_store	; deletes old shadow dot
		STA	(workspace),Y

		RTS

;****************************************

.sp_shadow	LDX	old_X
		LDA	pixel_offset
		AND	#4
		BEQ	under4

		INX
		LDA	#%01111111
		BNE	skip_u4

.under4		LDA	#%11110111

.skip_u4	PHA
		STX	old_X2
		LDY	old_Y2
		JSR	calculate_byte

		LDY	#0
		LDA	(workspace),Y
		STA	shadow_store

		LDA	pixel_offset
		AND	#3
		TAX

		PLA

		CPX	#0
		BEQ	sp_no_lsr

		SEC
.sp_loop	ROR	A
		DEX
		BNE	sp_loop

.sp_no_lsr	STA	sp_and+1

		LDA	(workspace),Y
.sp_and		AND	#&FF
		STA	(workspace),Y

		RTS

;****************************************

.animate_lives	LDA	#LO(&5AA8)
		STA	workspace+2
		LDA	#HI(&5AA8)
		STA	workspace+3

		LDA	lives
		BEQ	exit_al

		CMP	#5
		BCC	not_b_5

		LDA	#5

.not_b_5	STA	workspace

		LDA	frame		; WAS yts
		STA	workspace+1

.al_loop1	LDA	workspace+1
		EOR	#frames-1
		STA	workspace+1
		ASL	A
		ASL	A
		ASL	A
		TAX

		LDY	#7
.al_loop2	LDA	ball_data,X
		STA	(workspace+2),Y
		INX
		DEY
		BPL	al_loop2

		CLC
		LDA	workspace+2
		ADC	#8
		STA	workspace+2

		DEC	workspace
		BNE	al_loop1


.exit_al	LDA	#5
		SEC
		SBC	lives
		STA	workspace
		BEQ	exit_al2

.al_loop3	LDY	#7
		LDA	#0
.al_loop4	STA	(workspace+2),Y
		DEY
		BPL	al_loop4

		CLC
		LDA	workspace+2
		ADC	#8
		STA	workspace+2

		DEC	workspace
		BNE	al_loop3

.exit_al2	RTS

;****************************************
;****************************************

.ball_mask	EQUB	60,126,255,255,255,255,126,60

;*screen_store2	SKIP	16		; = 2 * columns of 8
;*screen_store	SKIP	16		; = 2 * columns of 8
;*
;*actual_ball	SKIP	16		; = 2 * columns of 8
;*actual_mask	SKIP	16		; = 2 * columns of 8

;****************************************
;****************************************

.display_timer	LDA	timer_digits
		ASL	A
		ASL	A
		ASL	A
		ADC	timer_frames
		TAY

		LDX	#0
.dt_loop1	LDA	timer_chars,Y
		STA	&5E10,X
		INX
		INY
		CPX	#8
		BNE	dt_loop1

;* * * * * * * * * * * * * * * * * * * *

		LDA	timer_digits+1
		ASL	A
		ASL	A
		ASL	A
		ADC	timer_frames+1
		TAY

		LDX	#0
.dt_loop2	LDA	timer_chars,Y
		STA	&5E10+8,X
		INX
		INY
		CPX	#8
		BNE	dt_loop2

;* * * * * * * * * * * * * * * * * * * *

		LDA	timer_digits+2
		ASL	A
		ASL	A
		ASL	A
		ADC	timer_frames+2
		TAY

		LDX	#0
.dt_loop3	LDA	timer_chars,Y
		EOR	#255
		STA	&5E10+16,X
		INX
		INY
		CPX	#8
		BNE	dt_loop3

;****************************************

		LDX	timer_frames+2
		DEX
		BPL	not_eoc4

		DEC	timer_digits+2

		LDA	timer_digits+2
		BPL	not_eoc41

		LDA	#9
		STA	timer_digits+2

.not_eoc41	LDX	#7
.not_eoc4	STX	timer_frames+2

;* * * * * * * * * * * * * * * * * * * *

		LDA	timer_digits+2
		CMP	#9
		BNE	not_eoc3

		LDA	timer_status
		ORA	#%00000100
		STA	timer_status

		LDX	timer_frames+1
		DEX
		BPL	not_eoc31

		DEC	timer_digits+1
		LDA	timer_digits+1
		BPL	not_eoc32

		LDA	#9
		STA	timer_digits+1

.not_eoc32	LDX	#7
.not_eoc31	STX	timer_frames+1
		BNE	not_eoc34

;* * * * * * * * * * * * * * * * * * * *

.not_eoc3	LDA	timer_status
		AND	#%11111011
		STA	timer_status

.not_eoc34	LDA	timer_digits+1
		CMP	#9
		BNE	not_eoc2

		LDA	timer_status
		AND	#%00000100
		BEQ	not_eoc2

		LDA	timer_status
		ORA	#%000000010
		STA	timer_status

		LDX	timer_frames
		DEX
		BPL	not_eoc21

		DEC	timer_digits

		LDX	#6
.not_eoc21	STX	timer_frames

		BNE	not_eoc24

;* * * * * * * * * * * * * * * * * * * *

.not_eoc2	LDA	timer_status
		AND	#%11111101
		STA	timer_status

.not_eoc24	JSR	draw_sbars

		RTS

;****************************************
;****************************************

.timer_chars	EQUB	%01111110	; 0
		EQUB	%00000000
		EQUB	%00011000
		EQUB	%00100100
		EQUB	%00100100
		EQUB	%00100100
		EQUB	%00011000
		EQUB	%00000000

		EQUB	%01111110	; 1
		EQUB	%00000000
		EQUB	%00001000
		EQUB	%00011000
		EQUB	%00001000
		EQUB	%00001000
		EQUB	%00011100
		EQUB	%00000000


		EQUB	%01111110	; 2
		EQUB	%00000000
		EQUB	%00011000
		EQUB	%00100100
		EQUB	%00001000
		EQUB	%00010000
		EQUB	%00111100
		EQUB	%00000000

		EQUB	%01111110	; 3
		EQUB	%00000000
		EQUB	%00011000
		EQUB	%00100100
		EQUB	%00001000
		EQUB	%00100100
		EQUB	%00011000
		EQUB	%00000000

		EQUB	%01111110	; 4
		EQUB	%00000000
		EQUB	%00100000
		EQUB	%00100000
		EQUB	%00101000
		EQUB	%00111100
		EQUB	%00001000
		EQUB	%00000000

		EQUB	%01111110	; 5
		EQUB	%00000000
		EQUB	%00111100
		EQUB	%00100000
		EQUB	%00111000
		EQUB	%00000100
		EQUB	%00011000
		EQUB	%00000000

		EQUB	%01111110	; 6
		EQUB	%00000000
		EQUB	%00011000
		EQUB	%00100000
		EQUB	%00111000
		EQUB	%00100100
		EQUB	%00011000
		EQUB	%00000000

		EQUB	%01111110	; 7
		EQUB	%00000000
		EQUB	%00111100
		EQUB	%00001000
		EQUB	%00010000
		EQUB	%00100000
		EQUB	%00100000
		EQUB	%00000000

		EQUB	%01111110	; 8
		EQUB	%00000000
		EQUB	%00011000
		EQUB	%00100100
		EQUB	%00011000
		EQUB	%00100100
		EQUB	%00011000
		EQUB	%00000000

		EQUB	%01111110	; 9
		EQUB	%00000000
		EQUB	%00011000
		EQUB	%00100100
		EQUB	%00011000
		EQUB	%00010000
		EQUB	%00100000
		EQUB	%00000000

		EQUB	%01111110	; 0
		EQUB	%00000000
		EQUB	%00011000
		EQUB	%00100100
		EQUB	%00100100
		EQUB	%00100100
		EQUB	%00011000
		EQUB	%00000000

;****************************************
;****************************************

		INCLUDE	"mc000c.6502"
