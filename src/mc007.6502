		TTL	mc007		; Enemy handler****************************************delete_enemy	LDA	enemy_x		AND	#1		BEQ	Yes_enemy		RTSYes_enemy	LDX	old_EX		LDY	old_EY		LDA	#>screen_store2		STA	restore+1		LDA	#<screen_store2		STA	restore+2		JSR	restore_area		LDA	#>screen_store		STA	restore+1		LDA	#<screen_store		STA	restore+2		JMP	nasty_dshad********************************************************************************print_enemy	LDA	enemy_x		AND	#1		BEQ	Yes_enemy2		RTSYes_enemy2	INC	e_frame		LDX	e_frame		LDA	screen_number		CMP	#5		BNE	notenmyj		CPX	#16		BEQ	resetef		BNE	not_fin_anmnotenmyj	CPX	#10		; No of enemy frames		BNE	not_fin_anmresetef	STZ	e_framenot_fin_anm	LDA	e_blocks		BNE	Skip_ItTry_Again	LDY	e_point		LDA	(pointer4),Y		BNE	Move_not_0		LDA	#4		STA	e_point		BRA	Try_AgainMove_not_0	TAX		AND	#7		STA	e_speed		STA	e_sp_c		TXA		LSR	A		LSR	A		LSR	A		AND	#7		STA	e_blocks		TXA		AND	#192		STA	e_direction		LDA	#16		STA	e_movesSkip_It	INC	e_sp_c		LDA	e_sp_c		CMP	#8		BNE	Speed_not_top		LDA	#8		STA	workspace+&F		JMP	Top_spSpeed_not_top	CMP	#7		BNE	No_move_yet		LDA	#4		STA	workspace+&FTop_sp		LDA	e_speed		STA	e_sp_c		LDA	e_direction		BNE	dir0			; NW???		LDA	enemy_x		SEC		SBC	workspace+&F		STA	enemy_x		LDA	enemy_x+1		SBC	#0		STA	enemy_x+1		JMP	dir_enddir0		CMP	#NE			; NE???		BNE	dir1		LDA	enemy_y		CLC		ADC	workspace+&F		STA	enemy_y		LDA	enemy_y+1		ADC	#0		STA	enemy_y+1		JMP	dir_enddir1		CMP	#SW			; SW???		BNE	dir2		LDA	enemy_y		SEC		SBC	workspace+&F		STA	enemy_y		LDA	enemy_y+1		SBC	#0		STA	enemy_y+1		JMP	dir_enddir2		LDA	enemy_x			; SE		CLC		ADC	workspace+&F		STA	enemy_x		LDA	enemy_x+1		ADC	#0		STA	enemy_x+1dir_end	LDA	e_moves		LSR	workspace+&F		LSR	workspace+&F		SEC		SBC	workspace+&F		STA	e_moves		BNE	Not0		LDA	#16		STA	e_moves		DEC	e_blocks		BNE	Not0		INC	e_pointNot0No_move_yet	LDA	enemy_x		; calculates pixel offset within		CLC			; bytes of ball ( 0,1,2 or 3 )		ADC	enemy_y		LSR	A		LSR	A		AND	#3		STA	workspace+7		STA	ny_pixoffset		LDX	screen_number		CPX	#5		BEQ	jspec1		LDA	e_frame		; pointer to present ball frame		ASL	A		ASL	A		ASL	A		ASL	A		ADC	#>nty_dta		STA	workspace+1				LDA	#<nty_dta		ADC	#0		STA	workspace+2		JMP	skipjspec1jspec1		LDA	e_frame		; pointer to present ball frame		AND	#254		ASL	A		ASL	A		ASL	A		ADC	#>ball_data		STA	workspace+1				LDA	#<ball_data		ADC	#0		STA	workspace+2		BANK	4		LDY	#15jcloop		LDA	(workspace+1),Y		AND	jmask,Y		STA	jsprite,Y		DEY		BPL	jcloop		LDA	#>jsprite		STA	workspace+1		LDA	#<jsprite		STA	workspace+2skipjspec1	LDA	#>actual_ball	; pointer to where new ball should		STA	workspace+3	; be stored		LDA	#<actual_ball		STA	workspace+4		LDX	#0		; poke extra row to 0		JSR	slide_frame	; slide it ?workspace times to the right		LDX	screen_number		CPX	#5		BEQ	jspec2		LDA	#>nty_msk	; pointer to present mask		STA	workspace+1		LDA	#<nty_msk		STA	workspace+2		JMP	skipjspec2jspec2		LDA	#>jmask2		STA	workspace+1		LDA	#<jmask2		STA	workspace+2skipjspec2	LDA	#>actual_mask	; pointer to where new mask should		STA	workspace+3	; be stored		LDA	#<actual_mask		STA	workspace+4		LDX	#255		; poke extra row to 255		JSR	slide_frame	; slide it ?workspace times to the right		LDX	#3pe_loop1	LDA	enemy_x,X		STA	mem,X		DEX		BPL	pe_loop1		JSR	hi		STA	n_bhi		PHA		LDA	workspace+&F		STA	ny_oldY		PLA		CMP	enemy_z		BCS	not_flying		LDA	enemy_zm		SEC		SBC	gravity		STA	enemy_zm		LDA	enemy_z		CLC		ADC	enemy_zm		STA	enemy_z		JMP	cont_ennot_flying	LDA	enemy_zm		BPL	not_down		CMP	#248		BCS	not_down		; (or nearly!!!)		EOR	#255		DEA		DEA		STA	enemy_zm		LDA	workspace+&F		CLC		ADC	enemy_zm		STA	enemy_z		JSR	bounce		BRA	cont_ennot_down	LDA	workspace+&F		SEC		SBC	enemy_z		STA	enemy_zm		LDA	workspace+&F		STA	enemy_zcont_en	LDX	#4pe_loop2	LDA	enemy_x,X		STA	workspace+&B,X		DEX		BPL	pe_loop2		LDA	old_X		PHA				LDA	old_Y		PHA		JSR	convert_coords		LDX	old_X		LDY	old_Y		PLA		STA	old_Y		PLA		STA	old_X		STX	old_EX		STY	old_EY		LDA	#>screen_store2		STA	save+1		LDA	#<screen_store2		STA	save+2		JSR	save_area		LDA	#>screen_store		STA	save+1		LDA	#<screen_store		STA	save+2		LDX	old_EX		LDY	old_EY		JSR	mask_sprite		JMP	nasty_spshad********************************************************************************e_speed	DS	1e_blocks	DS	1e_direction	DS	1e_sp_c		DS	1e_moves	DS	1old_EX		DS	1old_EY		DS	1********************************************************************************jmask		DFB	%00010001		DFB	%00110011		DFB	%01110111		DFB	%11111111		DFB	%11111111		DFB	%01110111		DFB	%00110011		DFB	%00010001		DFB	%10001000		DFB	%11001100		DFB	%11101110		DFB	%11111111		DFB	%11111111		DFB	%11101110		DFB	%11001100		DFB	%10001000jmask2		DFB	%11101110		DFB	%11001100		DFB	%10001000		DFB	%00000000		DFB	%00000000		DFB	%10001000		DFB	%11001100		DFB	%11101110		DFB	%01110111		DFB	%00110011		DFB	%00010001		DFB	%00000000		DFB	%00000000		DFB	%00010001		DFB	%00110011		DFB	%01110111jsprite	DS	24********************************************************************************		STR	"Tavish McVirus V3.1"********************************************************************************		CHN	mc008