		TTL	e.mc		; Sets up all variables & macros,					; also includes all source files********************************************************************************DEFINE		MACRO		LDA	#8		LDX	#>@1		LDY	#<@1		JSR	osword		ENDM********************************************************************************					; Defines X,Y for enemy's pathSTART		MACRO		DW	@1,@2		ENDM********************************************************************************					; Defines 1 move for enemy's pathMOVE		MACRO		DFB	@1+(@2*8)+@3		ENDM********************************************************************************					; Wait for return to be pressedWAIT		MACROw1@0		INKEY	-99		BNE	w1@0w2@0		INKEY	-99		BEQ	w2@0		ENDM********************************************************************************					; MACRO to provide INKEY(-) functionINKEY		MACRO		LDA	#&81		LDX	#>@1		LDY	#&FF		JSR	osbyte		TYA		ENDM********************************************************************************; Use SHADOW <ON/OFF>,<IN/OUT>; switches main 20k bank in & out of memorySHADOW		MACRO		LDA	#@1+@2		STA	accreg		ENDM********************************************************************************; switches any sideways ROM/RAM bank in BANK <socket number>BANK		MACRO		LDA	#@1		STA	romevn		STA	romsel		ENDM********************************************************************************; LOAD <string_location> ( Does OSCLI(string) )LOAD		MACRO		LDX	#>@1		LDY	#<@1		JSR	oscli		ENDM********************************************************************************					; TABLE <start>,<step>,<number>LOOKUP		MACROtemp@0		=	@1count@0	=	0		REPEAT		DW	temp@0temp@0		=	temp@0+@2count@0	=	count@0+1		UNTIL	count@0=@3		ENDM********************************************************************************OFF		=	0ON		=	1+2OUT		=	0IN		=	4********************************************************************************		ORG	&E00		; Code start********************************************************************************nvwrch		EQU	&FFC8		; setup all os routines and registersnvrdch		EQU	&FFCBosfind		EQU	&FFCEosbgpb		EQU	&FFD1osbput		EQU	&FFD4osbget		EQU	&FFD7osargs		EQU	&FFDAosfile		EQU	&FFDDosrdch		EQU	&FFE0osasci		EQU	&FFE3osnewl		EQU	&FFE7oswrch		EQU	&FFEEosword		EQU	&FFF1osbyte		EQU	&FFF4oscli		EQU	&FFF7romsel		EQU	&FE30romevn		EQU	&F4accreg		EQU	&FE34 * * * * * * * * * * * * * * * * * * * *		DSECT		ORG	&0000evframe_num	DS	1evworkspace	DS	7timer1		DS	1timer2		DS	1 * * * * * * * * * * * * * * * * * * * *	DS	4bass_offset	DS	1bb_num		DS	1bass_pointer	DS	2arpeg_offset	DS	1arpeg_pointer	DS	2main_offset	DS	1mb_num		DS	1main_pointer	DS	2drmem		DS	10xy		DS	5		; WAS :   xy	DS	6yts		DS	1yts2		DS	1ab		DS	10oxy		DS	6hites		DS	7j		DS	5mem		DS	5u		DS	1VC		DS	1h		DS	1old_h		DS	1c		DS	11workspace	DS	&14indicator	DS	1frame		DS	1old_X		DS	1old_Y		DS	1old_Y2		DS	1pixel_offset	DS	1old_height	DS	1pointer	DS	2controller	DS	1height_1	DS	1height_2	DS	1height_3	DS	1height_4	DS	1pixel_X	DS	1pixel_mask	DS	1pixel_actual	DS	1pointer2	DS	2pointer3	DS	2menu_st	DS	1enemy_x	DS	2enemy_y	DS	2enemy_z	DS	1enemy_zm	DS	1e_point	DS	1e_count	DS	1e_frame	DS	1pointer4	DS	2old_lives	DS	1arrows_X	DS	1arrows_Y	DS	1arrows_frame	DS	1last_selected	DS	1block_sh	DS	1music_volume	DS	1sound_volume	DS	1volume_delay	DS	1		DEND********************************************************************************delay		=	4****************************************frames		=	8****************************************NW		=	0NE		=	64SW		=	128SE		=	192********************************************************************************		DSECT		ORG	&8000ball_data	DS	&80		; BANK 4jewel_data	DS	&A0jewel_masks	DS	&A0menu_data	DS	&1D30ptr_spr	DS	&B0ptr_msk	DS	&B0nty_dta	DS	&A0nty_msk	DS	&10wipeout_s	DS	&E0wipeout_m	DS	&E0final		DS	&410lb_sprt	DS	&400lb_mask	DS	&40block1		DS	&240block2		DS	&240block3		DS	&240block4		DS	&240block5		DS	&240block6		DS	&240block7		DS	&240block_mask2	DS	&240block_data2	DS	&240ptr_sve	DS	&2C * * * * * * * * * * * * * * * * * * * *		ORG	&8000		; BANK 5level_data	DS	&1B54tv_frames	DS	&17A0bsp1		DS	&AF		; backgroundbsp2		DS	&AF		; MUM!bsp3		DS	&AF		; er ... well,bsp4		DS	&AF		; !bsp5		DS	&AF		; Home Sweet Homelbsp1		DS	&129		; backgroundlbsp2		DS	&129		; where hav you been ?lbsp3		DS	&129		; straight to bed - and no supper ! * * * * * * * * * * * * * * * * * * * *		ORG	&8000		; BANK 7menu_save	DS	&11D0credits_save	DS	&9A0		DEND********************************************************************************		CHN	mc000a