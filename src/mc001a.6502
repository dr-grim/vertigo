;		TTL	mc001a		; Initialises game,loads in data,etc

;****************************************

		EQUS	"Hello, nosey !!!"

;****************************************
;****************************************

;		EXEC	execute

;****************************************
;****************************************

.execute	LDA	#200
		LDX	#3
		JSR	osbyte

		LDA	#&4C
		STA	&287
		LDA	#&87
		STA	&288
		LDA	#&02
		STA	&289

		LDA	#229
		LDX	#1
		LDY	#0
		JSR	osbyte

		LDA	#4
		LDX	#1
		JSR	osbyte

;*		DEFINE	envelope3
;*		DEFINE	envelope4
;*		DEFINE	envelope5

		LDA	#LO(brk)
		STA	&202
		LDA	#HI(brk)
		STA	&203

;*		JSR	envelope_on

		JSR	define_font

		LDX	#0
.w_lp		STZ	&00,X
		INX
		CPX	#&90
		BNE	w_lp

	LDA	#3
	STA	music_volume
	STA	sound_volume

	JSR	music_onoff

		LDA	#LO(events_bit)
		STA	&220
		LDA	#HI(events_bit)
		STA	&221

		LDA	#14
		LDX	#4
		JSR	osbyte

		JSR	init_music

		BANK	4

		LDA	#%11000000	; menu status
		STA	menu_st

.iBM		LDA	#1		; screen
		STA	screen_number
		STZ	level_number	; level
		STZ	score		; score
		STZ	score+1
		STZ	score+2
		STZ	score+3
		STZ	score+4
		STZ	controller	; not demo

.start		JSR	demo

.st2		LDA	start_type
		BNE	not_1stlev

		LDA	#1		; screen
		STA	screen_number
		STZ	level_number	; level
		JSR	level

		BRA	skip_n1l

.not_1stlev	LDA	old_screen
		STA	screen_number
		LDA	old_level
		DEA
		STA	level_number
		JSR	level

		LDA	screen_number
		CMP	#1
		BNE	cheaton
		LDA	level_number
		CMP	#1
		BNE	cheaton

		BRA	skip_n1l

.cheaton	LDA	controller
		ORA	#2
		STA	controller

.skip_n1l	LDA	controller
		AND	#127
		STA	controller

		JSR	reset_status

.ds		JSR	venetian

		JSR	screen		; Draw screen

.n		LDA	lives
		STA	old_lives

		JSR	go

		DEC	lives
		LDA	lives
		CMP	#255
		BEQ	deceased

		LDA	lives
		CMP	old_lives
		BLT	not_ds

		LDA	level_number
		DEA		
		ASL	A
		TAY
		LDA	timer_speeds,Y
;*		CLC
		ADC	timer_digits
		STA	timer_digits

		LDA	timer_speeds+1,Y
		ADC	timer_digits+1
		STA	timer_digits+1


.test_dig0	LDA	timer_digits
		CMP	#4
		BLT	not_0ov

		LDA	#4
		STA	timer_digits

		STZ	timer_digits+1
		STZ	timer_digits+2
		STZ	timer_frames
		STZ	timer_frames+1
		STZ	timer_frames+2

		STZ	timer_status

		BRA	ds

.not_0ov	LDA	timer_digits+1
		CMP	#10
		BLT	ds

		INC	timer_digits
		STZ	timer_digits+1

		BRA	test_dig0

.not_ds		STZ	timer_digits+2

		LDA	level_number
		DEA		
		ASL	A
		TAY
		LDA	timer_speeds,Y
		STA	timer_digits
		LDA	timer_speeds+1,Y
		STA	timer_digits+1

		STZ	timer_frames
		STZ	timer_frames+1
		STZ	timer_frames+2

		STZ	timer_status

		JMP	n

.deceased	LDA	level_number
		STA	old_level
		LDA	screen_number
		STA	old_screen

		LDA	#14
		STA	workspace
		LDA	#4
		STA	workspace+1
		LDX	#9
		LDY	#1
		JSR	box

		LDX	#LO(XXX2)
		LDY	#HI(XXX2)
		JSR	type_text

		LDY	#0
		JSR	compare_score
		BEQ	not_new_hs

		JSR	new_high_score

.not_new_hs	LDA	#8
		STA	workspace
		LDA	#10
		STA	workspace+1
		LDX	#21
		LDY	#12
		JSR	box

		LDX	#LO(hstable)
		LDY	#HI(hstable)
		JSR	print_text

		JSR	pthst

		LDA	#20
		STA	workspace

.nnh_loop	LDA	#200
		JSR	key_delay

		JSR	test_start
		BCC	not_demo2

		JMP	st2

.not_demo2	DEC	workspace
		BNE	nnh_loop

		JMP	iBM

;****************************************

.new_high_score	LDA	#8
		STA	workspace
		LDA	#8
		STA	workspace+1
		LDX	#22
		LDY	#14
		JSR	box

		JSR	pthst

		LDX	#LO(XX3)
		LDY	#HI(XX3)
		JSR	type_text

		LDX	#0
.which_hs	TXA			; Calculate HS(X) address
		STA	drmem
		ASL	A
		ASL	A
		ASL	A
		ASL	A
		ADC	drmem

		INX			; Waits until it finds a high score
		TAY			; bigger than your score, and puts
		JSR	compare_score	; it's number in X
		BNE	which_hs

		DEX
		DEX

		TXA
		STA	drmem+4

		STA	drmem
		ASL	A
		ASL	A
		ASL	A
		ASL	A
		ADC	drmem		; Find address of it

;*		CLC
		ADC	#16		; A=Address of end of name
		STA	drmem		; (max. add to be moved)

		LDY	#17		; Y=Address to move
		TAX

.mveloOp	LDA	XXXX,Y
		STA	XXXX-17,Y	; Move HS's below yours down

		INY
		CPY	drmem		; Until Y passes top
		BCC	mveloOp
		BEQ	mveloOp

	 	LDY	#12
  		LDA	#32
.blanklp	STA	XXXX,X		; Fill your HS place with spaces
		DEX
		DEY
		BNE	blanklp

		LDA	score+4
		STA	XXXX,X		; Poke new Score
		LDA	score+3
		STA	XXXX-1,X
		LDA	score+2
		STA	XXXX-2,X
		LDA	score+1
		STA	XXXX-3,X
		LDA	score
		STA	XXXX-4,X

		INX
		STX	drmem+3		; Store name add for input routine

		JSR	pthst

		LDA	#11
		LDX	#0
		JSR	osbyte

		LDA	#21
		LDX	#0
		LDY	#0
		JSR	osbyte

		LDX	#17
		LDA	#13
		CLC
		ADC	drmem+4
		TAY
		JSR	move_cursor

		STZ	workspace	; Type in name routine
.all_ere	JSR	code		; Call Tune
		LDX	#1
		LDY	#0
		LDA	#&81
		JSR	osbyte		; Read key(in X centiseconds)
		CPY	#&1B
		BNE	nscape		; Escape hit?(if not skip next lines)
		LDA	#&7E
		JSR	osbyte		; Acknowledge Escape
		JMP	all_ere		; Try 'gain
.nscape		CPY	#255
		BEQ	all_ere		; Time-Out...Try 'gain
		LDA	workspace
		CPX	#13		; RETURN?
		BEQ	name_fin
		CMP	#12
		BNE	skipabit	; End of name?
		CPX	#127		; DELETE?
		BEQ	skipabit
.notRET		JMP	all_ere
.skipabit	CPX	#32
		BCC	all_ere		; Is char<32
		CPX	#128
		BCS	all_ere		; or >127
		CPX	#127		; DELETE?
		BEQ	del_hit
		LDA	workspace
		CMP	#12
		BEQ	all_ere
;*		CLC
		ADC	drmem+3
		TAY
		TXA
		STA	XXXX,Y
		JSR	oswrch
		INC	workspace
		JMP	all_ere

.del_hit	LDA	workspace
		BEQ	all_ere
;*		CLC
		ADC	drmem+3		; WAS drmem
		TAY
		LDA	#32
		STA	XXXX-1,Y
		DEC	workspace
		LDA	#127
		JSR	oswrch
		JMP	all_ere

.name_fin	JSR	venetian
		JMP	iBM

;****************************************
;****************************************

.pthst		LDA	#13		; Y co-ord
		STA	workspace+5

		LDA	#LO(hi_scores)	; address of high score table
		STA	workspace+2
		LDA	#HI(hi_scores)
		STA	workspace+3

		LDA	#10		; number of entries in table
		STA	workspace+4

.ph_loop1	LDX	#10
		LDY	workspace+5
		JSR	move_cursor

		LDX	workspace+2
		LDY	workspace+3
		JSR	print_number

		LDX	#17
		LDY	workspace+5
		JSR	move_cursor

		LDY	#5		
.ph_loop2	LDA	(workspace+2),Y
		JSR	oswrch
		INY
		CPY	#17
		BLT	ph_loop2

		LDA	workspace+2
		CLC
		ADC	#17
		STA	workspace+2
		LDA	workspace+3
		ADC	#0
		STA	workspace+3

		INC	workspace+5

		DEC	workspace+4
		BNE	ph_loop1

		RTS

;****************************************
;****************************************

		EQUB	0
		EQUS	"VULCAN"		; Dummy !

.hi_scores
.XXXX		EQUB	0,0,0,0,0
		EQUS	"  Stopped   "
		EQUB	0,0,1,0,0
		EQUS	"Snail's Pace"
		EQUB	0,0,2,0,0
		EQUS	"  Shameful  "
		EQUB	0,0,5,0,0
		EQUS	"    Slow    "
		EQUB	0,1,0,0,0
		EQUS	"  Subsonic  "
		EQUB	0,2,5,0,0
		EQUS	"   Speedy   "
		EQUB	0,5,0,0,0
		EQUS	" Supersonic "
		EQUB	1,0,0,0,0
		EQUS	"  Stylish   "
		EQUB	2,5,0,0,0
		EQUS	"   Superb   "
		EQUB	5,4,3,2,1
		EQUS	"  Superior  "

.XXX2		EQUB	31,15,5
		EQUS	"Game Over", &0D
		EQUB	255

.XX3		EQUB	31,11,9
		EQUS	"Congratulations !", &0D
		EQUB	31,14,10
		EQUS	"Hi-score!!!", &0D
		EQUB	31,11,11
		EQUS	"Type In Your Name:", &0D
		EQUB	255

;****************************************

.level_number	SKIP	1
.screen_number	SKIP	1

.lives		SKIP	1

.score		SKIP	5

.gravity	SKIP	1

.frame_delay	SKIP	1

;****************************************
;****************************************

;*cls2		JMP	venetian

;****************************************

.level		INC	level_number
		LDA	level_number
		CMP	#6
		BNE	not_l6

		LDA	#1
		STA	level_number

.not_l6		RTS

;****************************************

.brk		LDX	#LO(b_lets)
		LDY	#HI(b_lets)
		JSR	type_text

		LDY	#0
.b_lp2		INY
		LDA	(&FD),Y
		JSR	oswrch
		BNE	b_lp2

		LDA	#21
		LDX	#0
		LDY	#0
		JSR	osbyte

		LDA	#129
		LDX	#0
		LDY	#3
		JSR	osbyte

		JMP	execute

.b_lets		EQUS	"Error ! "
		EQUB	255

;****************************************

.demo		LDA	controller
		AND	#254
		STA	controller

		STZ	screen_number
		LDA	#1
		STA	level_number

.s_lp1		INC	screen_number
		LDA	screen_number
		CMP	#11
		BEQ	end_of_demo

		JSR	venetian

		LDA	controller
		AND	#252
		ORA	#128
		STA	controller

		JSR	screen

		LDA	controller
		AND	#128
		BEQ	ext_d1

.eTpd2		JSR	code

		LDA	#255
.d_loop1	STA	xy

		LDA	#19
		JSR	osbyte

		JSR	test_start
		BCS	ext_d1

		LDA	xy
		DEA
		BNE	d_loop1

		JMP	s_lp1

.ext_d1		CLC
		RTS

.end_of_demo	JSR	venetian

		LDA	#8
		STA	workspace
		LDA	#10
		STA	workspace+1
		LDX	#21
		LDY	#12
		JSR	box

		LDX	#LO(hstable)
		LDY	#HI(hstable)
		JSR	print_text

		JSR	pthst

		LDA	#255
.d_loop2	STA	xy

		LDA	#19
		JSR	osbyte

		JSR	code

		JSR	test_start
		BCS	ext_d1

		LDA	xy
		DEA
		BNE	d_loop2

		JMP	demo

;****************************************

.reset_status	STZ	score
		STZ	score+1
		STZ	score+2
		STZ	score+3
		STZ	score+4

		STZ	timer_digits+2

		LDA	level_number
		DEA		
		ASL	A
		TAY
		LDA	timer_speeds,Y
		STA	timer_digits
		LDA	timer_speeds+1,Y
		STA	timer_digits+1

		STZ	timer_frames
		STZ	timer_frames+1
		STZ	timer_frames+2

		STZ	timer_status

		LDA	#3		; lives
		STA	lives

		JSR	animate_lives

		JSR	display_timer

		JSR	print_score

		RTS

;****************************************
;****************************************

.old_level	EQUB	1
.old_screen	EQUB	1

.start_type	SKIP	1

;****************************************
;****************************************

.type_text	STX	workspace	; address ( MOD 256 )
		STY	workspace+1	; address ( DIV 256 )

.tt_loop	LDA	#19
		JSR	osbyte

		LDA	(workspace)
		CMP	#255
		BEQ	exit_tt

		JSR	oswrch

		LDA	workspace
		CLC
		ADC	#1
		STA	workspace
		LDA	workspace+1
		ADC	#0
		STA	workspace+1

		LDA	#50
		JSR	key_delay

		BRA	tt_loop

.exit_tt	RTS

;****************************************
;****************************************

		EQUS	"This message will self-destruct."

.compare_score	LDA	score
		CMP	hi_scores,Y
		BMI	not_newh
		BNE	is_newh

		LDA	score+1
		CMP	hi_scores+1,Y
		BMI	not_newh
		BNE	is_newh

		LDA	score+2
		CMP	hi_scores+2,Y
		BMI	not_newh
		BNE	is_newh

		LDA	score+3
		CMP	hi_scores+3,Y
		BMI	not_newh
		BNE	is_newh

		LDA	score+4
		CMP	hi_scores+4,Y
		BMI	not_newh
		BNE	is_newh


.not_newh	LDA	#0
		RTS

.is_newh	LDA	#255
		RTS

;****************************************
;****************************************

.hstable	EQUB	31,14,11
		EQUS	"Hi-scores :"
		EQUB	0

;****************************************
;****************************************

;		CHN	mc001b
