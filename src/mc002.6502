;		TTL	mc002		; Draws screen

;****************************************
;****************************************

.screen		BANK	5

		STZ	hit_esc

		JSR	venetian

		LDA	controller
		AND	#128
		BEQ	ntxtdTA

		LDX	#LO(demo_text)
		LDY	#HI(demo_text)
		JSR	print_pwtxt

.ntxtdTA	LDA	screen_number
		CMP	#11
		BNE	ocean
		LDA	#1
		STA	screen_number

		JSR	level

.ocean		JSR	print_score

		LDX	#2
		LDY	#26
		JSR	move_cursor

		LDA	level_number
		LDX	#0
.lingR		CMP	#10
		BCC	njR
		INX
;*		SEC
		SBC	#10
		BRA	lingR
.njR		TAY
		TXA
		BEQ	pcv
;*		CLC
		ADC	#48
		JSR	oswrch
.pcv		TYA
		CLC
		ADC	#48
		JSR	oswrch

		LDX	#2
		LDY	#29
		JSR	move_cursor

		LDA	screen_number
		CMP	#10
		BEQ	dix
;*		CLC
		ADC	#48
		JSR	oswrch
		BRA	rest

.dix		LDA	#128
		JSR	oswrch

.rest		LDA	controller
		AND	#128
		BNE	is_demo

		JSR	print_password

.is_demo	JSR	init_screen

		LDX	#0
.loop1		LDY	#9
.loop2		STX	workspace+&10
		STY	workspace+&11
		LDX	#11
		JSR	mult
		CLC
		ADC	workspace+&10
		TAY
		LDA	(pointer),Y
		AND	#1
		BEQ	miss
		LDX	workspace+&10
		LDY	workspace+&11

		JSR	bloc

.miss		JSR	code

;*		LDA	controller
;*		AND	#128
;*		BEQ	not_demo

		JSR	test_start
		BCC	not_demo

		LDA	controller
		AND	#128
		BEQ	not_demo999

		LDA	controller
		AND	#127
		STA	controller
 		RTS
;*		JMP	exit_screen

.not_demo999	JMP	screen

.not_demo

;*		INKEY	-120
;*		BEQ	not_copy
;*
;*		JSR	draw_menu
;*
;*not_copy	JSR	check_optkeys

		LDX	workspace+&10
		LDY	workspace+&11
		DEY
		CPY	#&FF
		BNE	loop2

		INX

		LDA	level_number
		CMP	#6
		BNE	nots3l6

		LDA	screen_number
		CMP	#3
		BNE	nots3l6

		CPX	#6
		BNE	loop1

		BRA	exit_screen

.nots3l6	CPX	#10
		BNE	loop1

.exit_screen	JSR	init_screen2

		RTS

;****************************************

.bloc		STX	workspace+&12
		STY	workspace+&13
		LDX	#11
		JSR	mult
		CLC
		ADC	workspace+&12
		TAY

		LDA	(pointer),Y
		STA	workspace
		AND	#2
		BEQ	nflt

		LDA	workspace
		LSR	A
		LSR	A
		CLC
		ADC	#10
		STA	height_1
		STA	height_4
;*		CLC
		ADC	#10
		STA	height_3
		SEC
		SBC	#20
		STA	height_2
		BRA	flt

.nflt		LDA	(pointer),Y
		LSR	A
		LSR	A
		CLC
		ADC	#10
		STA	height_1

		INY
		LDA	(pointer),Y
		LSR	A
		LSR	A
		STA	height_2

		TYA
		CLC
		ADC	#11
		TAY
		LDA	(pointer),Y
		LSR	A
		LSR	A
		CLC
		ADC	#10
		STA	height_4

		DEY
		LDA	(pointer),Y
		LSR	A
		LSR	A
		CLC
		ADC	#20
		STA	height_3

.flt		LDA	height_1
		STA	block_sh

		LDA	height_2
		CMP	block_sh
		BLT	bs_2

		STA	block_sh

.bs_2		LDA	height_3
		CMP	block_sh
		BLT	bs_3

		STA	block_sh

.bs_3		LDA	height_4
		CMP	block_sh
		BLT	bs_4

		STA	block_sh

.bs_4		LDA	#71
		SEC
		SBC	block_sh
		STA	block_sh

		BANK	4

		LDA	screen_number
		DEA
		LDX	level_number
		DEX
		BEQ	skip_addlev

		CLC
.addlev_loop	ADC	#10
		DEX
		BNE	addlev_loop

.skip_addlev	ASL	A
		TAX
		LDA	block_table,X
		STA	cb_loop2+1
		LDA	block_table+1,X
		STA	cb_loop2+2

		LDA	#LO(block_data2)
		STA	cbl_bd+1
		LDA	#HI(block_data2)
		STA	cbl_bd+2

		LDA	#LO(block_mask2)
		STA	cml_bm+1
		LDA	#HI(block_mask2)
		STA	cml_bm+2

		LDY	#8
.cb_loop1	LDX	block_sh

.cb_loop2	LDA	&FFFF,X
.cbl_bd		STA	&FFFF,X
.cml_bm		STZ	&FFFF,X
		INX
		CPX	#72
		BLT	cb_loop2

		LDA	cb_loop2+1
		CLC
		ADC	#72
		STA	cb_loop2+1
		BCC	cblp2_cc
		CLC
		INC	cb_loop2+2

;*		LDA	cb_loop2+2
;*		ADC	#0
;*		STA	cb_loop2+2

.cblp2_cc	LDA	cbl_bd+1
		ADC	#72
		STA	cbl_bd+1
		BCC	cblbd_cc

		CLC
		INC	cbl_bd+2

;*		LDA	cbl_bd+2
;*		ADC	#0
;*		STA	cbl_bd+2

.cblbd_cc	LDA	cml_bm+1
;*		CLC
		ADC	#72
		STA	cml_bm+1
		BCC	cmlbm_cc

		CLC
		INC	cml_bm+2

;*		LDA	cml_bm+2
;*		ADC	#0
;*		STA	cml_bm+2

.cmlbm_cc	DEY
		BNE	cb_loop1

; * * * * * * * * * * * * * * * * * * * *

		JSR	code

; * * * * * * * * * * * * * * * * * * * *

		STZ	pixel_X

.block_loop1	LDA	pixel_X
		AND	#3
		BNE	pm_jmp1

		LDA	#%10001000
		BRA	pm_jmp2

.pm_jmp1	TAX
		LDA	#%10001000
.pm_loop1	LSR	A
		DEX
		BNE	pm_loop1

.pm_jmp2	EOR	#%11111111
		STA	pixel_mask

		EOR	#%11111111
		AND	#%00001111
		STA	pixel_actual

		LDA	pixel_X
		AND	#252
		LSR	A
		LSR	A
		CLC
		ADC	#4
		TAX

		LDA	#LO(block_data2)
		STA	pointer2
		LDA	#HI(block_data2)
		STA	pointer2+1

		LDA	#LO(block_mask2)
		STA	pointer3
		LDA	#HI(block_mask2)
		STA	pointer3+1

		TXA
		BEQ	bo_jmp1

		CLC

.bo_loop1	LDA	pointer2
;*		CLC
		ADC	#72
		STA	pointer2
		BCC	p2_cc

		CLC
		INC	pointer2+1

;*		LDA	pointer2+1
;*		ADC	#0
;*		STA	pointer2+1

.p2_cc		LDA	pointer3
;*		CLC
		ADC	#72
		STA	pointer3
		BCC	p3_cc

		CLC
		INC	pointer3+1

;*		LDA	pointer3+1
;*		ADC	#0
;*		STA	pointer3+1

.p3_cc		DEX
		BNE	bo_loop1

.bo_jmp1	LDA	height_2
		STA	workspace+5
		LDA	height_4
		STA	workspace+6

		JSR	calc_height
		STA	workspace

		LDA	#72
		SEC
		SBC	workspace
		TAY

		LDA	height_3
		STA	workspace+5
		LDA	height_4
		STA	workspace+6

		JSR	calc_height
		STA	workspace

		LDA	#72
		SEC
		SBC	workspace
		STA	workspace

		LDA	(pointer2),Y
		AND	pixel_mask
		STA	(pointer2),Y
		DEY

		CPY	workspace
		BCC	ndbl1

.db_loop1	LDA	(pointer2),Y	; poke block up
		AND	pixel_mask
		ORA	pixel_actual
		STA	(pointer2),Y
		DEY
		CPY	workspace
		BCS	db_loop1

.ndbl1		LDA	pixel_mask
		EOR	#255
		STA	workspace

		LDA	(pointer2),Y
		AND	pixel_mask
		STA	(pointer2),Y
		DEY

.db_loop2	LDA	(pointer2),Y
		AND	pixel_mask
		STA	(pointer2),Y

		LDA	(pointer3),Y
		ORA	workspace
		STA	(pointer3),Y

		DEY
		CPY	block_sh
		BGE	db_loop2

		INC	pixel_X
		LDA	pixel_X
		CMP	#16
		BEQ	end_of_block1

		JMP	block_loop1

.end_of_block1	STZ	pixel_X

.block_loop2	LDA	pixel_X
		AND	#3
		BNE	pm_jmp12

		LDA	#%10001000
		BRA	pm_jmp22

.pm_jmp12	TAX
		LDA	#%10001000
.pm_loop12	LSR	A
		DEX
		BNE	pm_loop12

.pm_jmp22	EOR	#%11111111
		STA	pixel_mask

		EOR	#%11111111
		AND	#%00001111
		STA	pixel_actual

		LDA	pixel_X
		LSR	A
		LSR	A
		TAX

		LDA	#LO(block_data2)
		STA	pointer2
		LDA	#HI(block_data2)
		STA	pointer2+1

		LDA	#LO(block_mask2)
		STA	pointer3
		LDA	#HI(block_mask2)
		STA	pointer3+1

		TXA
		BEQ	bo_jmp12

		CLC

.bo_loop12	LDA	pointer2
;*		CLC
		ADC	#72
		STA	pointer2
		BCC	p22_cc

		CLC
		INC	pointer2+1

;*		LDA	pointer2+1
;*		ADC	#0
;*		STA	pointer2+1

.p22_cc		LDA	pointer3
;*		CLC
		ADC	#72
		STA	pointer3
		BCC	p32_cc

		CLC
		INC	pointer3+1

;*		LDA	pointer3+1
;*		ADC	#0
;*		STA	pointer3+1

.p32_cc		DEX
		BNE	bo_loop12

.bo_jmp12	LDA	height_1
		STA	workspace+5
		LDA	height_2
		STA	workspace+6

		JSR	calc_height
		STA	workspace

		LDA	#72
		SEC
		SBC	workspace
		TAY

		LDA	height_1
		STA	workspace+5
		LDA	height_3
		STA	workspace+6

		JSR	calc_height
		STA	workspace

		LDA	#72
		SEC
		SBC	workspace
		STA	workspace

		LDA	(pointer2),Y
		AND	pixel_mask
		STA	(pointer2),Y
		DEY

		CPY	workspace
		BCC	Ndblp12

		LDA	pixel_X
		BEQ	Ndblp12

.db_loop12	LDA	(pointer2),Y	; poke block up
		AND	pixel_mask
		ORA	pixel_actual
		STA	(pointer2),Y
		DEY
		CPY	workspace
		BCS	db_loop12

.Ndblp12	LDA	pixel_mask
		EOR	#255
		STA	workspace

		LDA	(pointer2),Y
		AND	pixel_mask
		STA	(pointer2),Y
		DEY

.db_loop22	LDA	(pointer2),Y
		AND	pixel_mask
		STA	(pointer2),Y

		LDA	(pointer3),Y
		ORA	workspace
		STA	(pointer3),Y

		DEY
		CPY	block_sh
		BGE	db_loop22

		INC	pixel_X
		LDA	pixel_X
		CMP	#16
		BEQ	end_of_block2

		JMP	block_loop2

.end_of_block2	LDA	#LO(block_data2)
		STA	b_sprite+1
		LDA	#HI(block_data2)
		STA	b_sprite+2

		LDA	#LO(block_mask2)
		STA	b_mask+1
		LDA	#HI(block_mask2)
		STA	b_mask+2

		LDA	workspace+&12
		CLC
		ADC	workspace+&13
		ASL	A
		ASL	A
		STA	drmem

		LDA	workspace+&13
		SEC
		SBC	workspace+&12
		STA	drmem+1
		LDX	#9
.add_loop	CLC
		ADC	drmem+1
		DEX
		BNE	add_loop

		EOR	#255
		CLC
		ADC	#94

		TAY
		LDX	drmem
		JSR	blck_spr

		BANK	5

		RTS

;****************************************
;****************************************

.hit_esc	SKIP	1

;*****************************************
;*****************************************

.init_screen	LDA	#LO(level_data)
		STA	pointer
		LDA	#HI(level_data)
		STA	pointer+1

		LDA	screen_number	; screen =
		LDX	level_number	; (level-1)*10
		CLC			; +screen-1

.llpXX		DEX
		BEQ	e_clp
		ADC	#10
		BRA	llpXX

.e_clp		STA	flippy

		TAX
		DEX
		LDY	#132
		JSR	mult

		LDA	workspace+&8
		CLC
		ADC	pointer
		STA	pointer
		LDA	workspace+&9
		ADC	pointer+1
		STA	pointer+1


		LDA	flippy
		ASL	A
		CLC
		ADC	flippy
		TAX

		LDA	#1
		LDY	colsch-3,X
		JSR	vdu19

		LDA	#2
		LDY	colsch-2,X
		JSR	vdu19

		LDA	#3
		LDY	colsch-1,X
		JSR	vdu19

		LDY	#131
		LDA	(pointer),Y
		STA	gravity

		RTS

;*****************************************

.init_screen2	BANK	5

		LDY	#127
		LDA	(pointer),Y
		STA	j
		INY
		LDA	(pointer),Y
		STA	j+1
		INY
		LDA	(pointer),Y
		STA	j+2
		INY
		LDA	(pointer),Y
		STA	j+3
		LDX	#3
.dngdo		LDA	j,X
		STA	workspace+&B,X
		STA	mem,X
		DEX
		BPL	dngdo
		JSR	hi
		LDA	workspace+&F
		STA	j+4

		LDY	#122
		LDA	(pointer),Y
		STA	xy
		INY
		LDA	(pointer),Y
		STA	xy+1
		INY
		LDA	(pointer),Y
		STA	xy+2
		INY
		LDA	(pointer),Y
		STA	xy+3
		INY
		LDA	(pointer),Y
		STA	xy+4

		STZ	ab
		STZ	ab+1
		STZ	ab+2
		STZ	ab+3
		STZ	ab+4

		JSR	setup_ball

		LDA	j
		CLC
		ADC	j+1
		ADC	j+2
		ADC	j+3
		BEQ	no_jewel

		BANK	4
		JSR	print_jewel
		BANK	5

.no_jewel	RTS

;*****************************************

.flippy		EQUB	0

;*****************************************
;*****************************************

.move_cursor	LDA	#31
		JSR	oswrch
		TXA
		JSR	oswrch
		TYA
		JMP	oswrch

;*****************************************
;*****************************************

.print_number	STX	workspace
		STY	workspace+1

		LDY	#0

.pn_loop	LDA	(workspace),Y
		CLC
		ADC	#48
		JSR	oswrch

		INY
		CPY	#5
		BNE	pn_loop

		RTS

;*****************************************
;*****************************************

.vdu19		PHA
		LDA	#19
		JSR	oswrch
		PLA
		JSR	oswrch
		TYA
		JSR	oswrch
		LDA	#0
		JSR	oswrch
		JSR	oswrch
		JMP	oswrch

;*****************************************
;*****************************************

.print_score	LDX	#2
		LDY	#4
		JSR	move_cursor

		LDX	#LO(score)
		LDY	#HI(score)
		JMP	print_number

;*****************************************
;*****************************************

;		CHN	mc003a
