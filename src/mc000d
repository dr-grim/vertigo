		TTL	mc000d		; All sprite/screen routines that poke					; directly to the shadow screen memory****************************************tb_pointer	=	workspacetb_pixels	=	workspace+2tb_counter	=	workspace+3********************************************************************************time_bar	LDA	timer_digits		ASL	A		STA	tb_pixels		ASL	A				ASL	A		ADC	tb_pixels		ADC	timer_digits+1		STA	tb_pixels		LSR	A		CLC		ADC	tb_pixels		STA	tb_pixels		LDA	#>&36E8		STA	tb_pointer		LDA	#<&36E8		STA	tb_pointer+1		LDA	#60		SEC		SBC	tb_pixels		STA	tb_counter		LDA	tb_pixels		CMP	#15		BGE	not_danger		LDA	#15		STA	tb_red1+1		LDA	#>red_bar		STA	tb_red2+1		LDA	#<red_bar		STA	tb_red2+2		BRA	skip_dangernot_danger	LDA	#255		STA	tb_red1+1		LDA	#>white_bar		STA	tb_red2+1		LDA	#<white_bar		STA	tb_red2+2skip_danger	LDY	#0		LDA	tb_pixels		CMP	#4		BLT	skip_bulktb_loop1	INY		INY		LDA	#15		STA	(tb_pointer),Y		INYtb_red1	LDA	#&FF		STA	(tb_pointer),Y		INY		STA	(tb_pointer),Y		INY		LDA	#15		STA	(tb_pointer),Y		INY				INY		INY		LDA	tb_pixels		SEC		SBC	#4		STA	tb_pixels		BMI	skip_bulk		CMP	#4		BGE	tb_loop1skip_bulk	LDA	tb_pixels		BEQ	skip_innerbit		LDX	tb_pixels		INY		INY		LDA	red_bar,X		STA	(tb_pointer),Y		INYtb_red2	LDA	&FFFF,X		STA	(tb_pointer),Y		INY		STA	(tb_pointer),Y		INY		LDA	red_bar,X		STA	(tb_pointer),Y		INY		INY		INYskip_innerbit	LDA	tb_counter		CMP	#4		BLT	exit_time_bar		LDA	tb_counter		SEC		SBC	#4		STA	tb_countertb_loop3	INY		INY		LDA	#0		STA	(tb_pointer),Y		INY		STA	(tb_pointer),Y		INY		STA	(tb_pointer),Y		INY		STA	(tb_pointer),Y		INY		INY		INY		LDA	tb_counter		SEC		SBC	#4		STA	tb_counter		BPL	tb_loop3exit_time_bar	RTS****************************************red_bar	DFB	%00000000,%00001000,%00001100,%00001110,%00001111white_bar	DFB	%00000000,%10001000,%11001100,%11101110,%11111111********************************************************************************sb_pointer	=	workspace****************************************draw_sbars	LDA	#>&7A78		STA	sb_pointer		LDA	#<&7A78		STA	sb_pointer+1		LDA	x_bar		AND	#15		STA	x_bar		LDX	x_bar		BEQ	exit_xbar2sb_loop1x	LDY	#7sb_loop2x 	LDA	#%11101111		STA	(sb_pointer),Y		DEX		BEQ	exit_xbar1		DEY		BPL	sb_loop2x		LDA	sb_pointer		SEC		SBC	#>&280		STA	sb_pointer		LDA	sb_pointer+1		SBC	#<&280		STA	sb_pointer+1		BRA	sb_loop1xexit_xbar1	DEY		BPL	exit_xbar3		LDA	sb_pointer		SEC		SBC	#>&280		STA	sb_pointer		LDA	sb_pointer+1		SBC	#<&280		STA	sb_pointer+1exit_xbar2	LDY	#7exit_xbar3	LDA	#15		SEC		SBC	x_bar		TAX		BEQ	exit_xbarsb_loop2x2	LDA	#%00000001		STA	(sb_pointer),Y		DEX		BEQ	exit_xbar		DEY		BPL	sb_loop2x2		LDA	sb_pointer		SEC		SBC	#>&280		STA	sb_pointer		LDA	sb_pointer+1		SBC	#<&280		STA	sb_pointer+1		LDY	#7		BRA	sb_loop2x2exit_xbar	LDA	#>&7A78+16		STA	sb_pointer		LDA	#<&7A78+16		STA	sb_pointer+1		LDA	y_bar		AND	#15		STA	y_bar		LDX	y_bar		BEQ	exit_ybar2sb_loop1y	LDY	#7sb_loop2y 	LDA	#%11101111		STA	(sb_pointer),Y		DEX		BEQ	exit_ybar1		DEY		BPL	sb_loop2y		LDA	sb_pointer		SEC		SBC	#>&280		STA	sb_pointer		LDA	sb_pointer+1		SBC	#<&280		STA	sb_pointer+1		BRA	sb_loop1yexit_ybar1	DEY		BPL	exit_ybar3		LDA	sb_pointer		SEC		SBC	#>&280		STA	sb_pointer		LDA	sb_pointer+1		SBC	#<&280		STA	sb_pointer+1exit_ybar2	LDY	#7exit_ybar3	LDA	#15		SEC		SBC	y_bar		TAX		BEQ	exit_ybarsb_loop2y2	LDA	#%00000001		STA	(sb_pointer),Y		DEX		BEQ	exit_ybar		DEY		BPL	sb_loop2y2		LDA	sb_pointer		SEC		SBC	#>&280		STA	sb_pointer		LDA	sb_pointer+1		SBC	#<&280		STA	sb_pointer+1		LDY	#7		BRA	sb_loop2y2exit_ybar	LDA	#>&7A78+32		STA	sb_pointer		LDA	#<&7A78+32		STA	sb_pointer+1		LDA	h_bar		AND	#15		STA	h_bar		LDX	h_bar		BEQ	exit_hbar2sb_loop1h	LDY	#7sb_loop2h 	LDA	#%11101111		STA	(sb_pointer),Y		DEX		BEQ	exit_hbar1		DEY		BPL	sb_loop2h		LDA	sb_pointer		SEC		SBC	#>&280		STA	sb_pointer		LDA	sb_pointer+1		SBC	#<&280		STA	sb_pointer+1		BRA	sb_loop1hexit_hbar1	DEY		BPL	exit_hbar3		LDA	sb_pointer		SEC		SBC	#>&280		STA	sb_pointer		LDA	sb_pointer+1		SBC	#<&280		STA	sb_pointer+1exit_hbar2	LDY	#7exit_hbar3	LDA	#15		SEC		SBC	h_bar		TAX		BEQ	exit_hbarsb_loop2h2	LDA	#%00000001		STA	(sb_pointer),Y		DEX		BEQ	exit_hbar		DEY		BPL	sb_loop2h2		LDA	sb_pointer		SEC		SBC	#>&280		STA	sb_pointer		LDA	sb_pointer+1		SBC	#<&280		STA	sb_pointer+1		LDY	#7		BRA	sb_loop2h2exit_hbar	RTS********************************************************************************x_bar		DFB	0y_bar		DFB	0h_bar		DFB	0********************************************************************************events_bit	PHP		PHA		PHX		PHY		LDA	timer2		CMP	#255		BNE	not_animate		LDA	accreg		PHA		LDA	romsel		PHA		JSR	frame_update		PLA		STA	romevn		STA	romsel		PLA		STA	accreg		BRA	exit_eventsnot_animate	INC	timer1		BNE	exit_events		INC	timer2		LDA	timer2		CMP	#255		BNE	exit_events		LDA	#255		STA	timer2		STZ	evframe_num		STZ	timer1exit_events	PLY		PLX		PLA		PLP		RTS********************************************************************************frame_update	INC	timer1		LDA	timer1		CMP	#6		BNE	exit_fu		STZ	timer1		LDY	evframe_num		LDA	evframe_table,Y		ASL	A		TAY		LDA	evn_table,Y		STA	evrestore+1		LDA	evn_table+1,Y		STA	evrestore+2		BANK	5		JSR	evn_sprite				INC	evframe_num		LDY	evframe_num		LDA	evframe_table,Y		CMP	#255		BNE	exit_fu		STZ	timer1		STZ	timer2exit_fu	RTS********************************************************************************evn_table	LOOKUP	tv_frames,168,36********************************************************************************evn_sprite	SHADOW	ON,IN		LDA	#24		; height of sprite in bytes		STA	evworkspace+3		LDA	#7		; width of sprite in bytes		STA	evworkspace+4		LDA	#&28		STA	evworkspace		LDA	#&73		STA	evworkspace+1		LDX	#0evmain_loop3	LDA	evworkspace		AND	#&F8		STA	evworkspace+5	; copy of screen address MOD,		LDA	evworkspace+1		STA	evworkspace+6	; and DIV.		LDA	evworkspace		AND	#7		TAYevrestore	LDA	&FFFF,X		; restore area		STA	(evworkspace+5),Y	; to screen		INX			; X will never clock as data = 24 bytesevchecks3	INY		CPX	evworkspace+3		BEQ	evend_of_column3		CPY	#8		BNE	evrestore		LDA	evworkspace+5		ADC	#&7F		STA	evworkspace+5		LDA	evworkspace+6		ADC	#2		STA	evworkspace+6		LDY	#0		BRA	evrestoreevend_of_column3	LDA	evworkspace		CLC		ADC	#8		STA	evworkspace		BCC	evcarry_clear3		CLC		INC	evworkspace+1evcarry_clear3	LDA	evworkspace+3evra_adc		ADC	#24		STA	evworkspace+3		DEC	evworkspace+4		BNE	evmain_loop3		SHADOW	ON,OUT		RTS********************************************************************************evframe_table	DFB	0,1,2,3		DFB	0,1,2,3		DFB	0,1,2,3		DFB	0,1,2,3		DFB	0,1,2,3		DFB	0,1,2,3		DFB	0,1,2,3		DFB	0,1,2,3		DFB	0,1,2,3		DFB	0,1,2,3		DFB	0,1,2,3		DFB	0,1,2,3		DFB	0,1,2,3		DFB	0,1,2,3		DFB	0,1,2,3		DFB	0,1,2,3		DFB	0,1,2,3		DFB	10,4,5,6,7,8		DFB	9,9,9,9,9,9,9,9,9,9		DFB	9,9,9,9,9,9,9,9,9,9		DFB	9,9,9,9,9,9,9,9,9,9		DFB	11,12,13,14,15,16,17,18,19,20,21		DFB	22,23,24,25,26,27,28,29,30,31,32		DFB	9,9,9,9,9,9,9,9,9,9		DFB	33,33,33,33,33,33		DFB	33,33,33,33,33,33		DFB	9,9,9,9,9,9,9,9,9,9		DFB	9,9,9,9,9,9,9,9,9,9		DFB	34,34,34,34,34,34		DFB	34,34,34,34,34,34		DFB	9,9,9,9,9,9		DFB	9,9,9,9,9,9		DFB	35,35,35,35,35,35		DFB	35,35,35,35,35,35		DFB	9,9,9,9,9,9		DFB	9,9,9,9,9,9		DFB	9,8,7,6,5,4,10		DFB	255********************************************************************************nasty_dshad	LDA	n_bhi		BEQ	exit_nds		LDX	old_EX		INX		LDY	ny_oldY		JSR	calculate_byte		SHADOW	ON,IN		LDA	ny_shstore		STA	(workspace)		SHADOW	ON,OUTexit_nds	RTS****************************************ny_oldY	DS	1ny_shstore	DS	1ny_pixoffset	DS	1n_bhi		DS	1****************************************nasty_spshad	LDA	n_bhi		BNE	not_on_holen		RTSnot_on_holen	LDX	old_EX		INX		LDA	enemy_z		CMP	ny_oldY		BLT	nss_sk1		LDA	#0		CLC		ADC	enemy_z		SEC		SBC	ny_oldY		LSR	A		LSR	A		CLC		ADC	old_EY		ADC	#8		BRA	nss_sk2nss_sk1	LDA	old_EY		CLC		ADC	#8nss_sk2	STA	ny_oldY		TAY		JSR	calculate_byte		SHADOW	ON,IN		LDA	(workspace)		STA	ny_shstore		LDA	#%10001000		LDY	ny_pixoffset		BEQ	ny_snlny_lp1		LSR	A		DEY		BNE	ny_lp1ny_snl		ORA	(workspace)		STA	(workspace)		SHADOW	ON,OUT		RTS********************************************************************************		CHN	mc001a